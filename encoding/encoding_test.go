package encoding

import (
	"testing"

	"github.com/mailru/easyjson"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_StdJSONEncode(t *testing.T) {
	o := object{
		StringProp1: "foo",
		StringProp2: "bar",
		List: []embedded{
			{
				StringProp: "foo",
				IntProp:    2021,
			},
		},
	}

	expected := []byte(`{"string_prop_1":"foo","string_prop_2":"bar","list":[{"string_prop":"foo","int_prop":2021}]}`)

	actual, err := o.stdJSONEncode()
	assert.NoError(t, err)
	assert.Equal(t, expected, actual)
}

func Test_StdJSONDecode(t *testing.T) {

	input := []byte(`{"string_prop_1":"foo","string_prop_2":"bar","list":[{"string_prop":"foo","int_prop":2021}]}`)

	expected := object{
		StringProp1: "foo",
		StringProp2: "bar",
		List: []embedded{
			{
				StringProp: "foo",
				IntProp:    2021,
			},
		},
	}

	var o object
	err := o.stdJSONDecode(input)
	assert.NoError(t, err)
	assert.Equal(t, expected, o)
}

func Test_StdGobEncode(t *testing.T) {
	o := object{
		StringProp1: "foo",
		StringProp2: "bar",
		List: []embedded{
			{
				StringProp: "foo",
				IntProp:    2021,
			},
		},
	}

	expected := []byte{0x3e, 0xff, 0x81, 0x3, 0x1, 0x1, 0x6, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1, 0xff, 0x82, 0x0,
		0x1, 0x3, 0x1, 0xb, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x31, 0x1, 0xc, 0x0, 0x1, 0xb,
		0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x32, 0x1, 0xc, 0x0, 0x1, 0x4, 0x4c, 0x69, 0x73,
		0x74, 0x1, 0xff, 0x86, 0x0, 0x0, 0x0, 0x22, 0xff, 0x85, 0x2, 0x1, 0x1, 0x13, 0x5b, 0x5d, 0x65, 0x6e, 0x63, 0x6f,
		0x64, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x1, 0xff, 0x86, 0x0, 0x1, 0xff,
		0x84, 0x0, 0x0, 0x31, 0xff, 0x83, 0x3, 0x1, 0x1, 0x8, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x1, 0xff,
		0x84, 0x0, 0x1, 0x2, 0x1, 0xa, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x1, 0xc, 0x0, 0x1,
		0x7, 0x49, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x1, 0x4, 0x0, 0x0, 0x0, 0x19, 0xff, 0x82, 0x1, 0x3, 0x66, 0x6f,
		0x6f, 0x1, 0x3, 0x62, 0x61, 0x72, 0x1, 0x1, 0x1, 0x3, 0x66, 0x6f, 0x6f, 0x1, 0xfe, 0xf, 0xca, 0x0, 0x0}

	actual, err := o.stdGobEncode()

	assert.NoError(t, err)
	assert.Equal(t, expected, actual)
}

func Test_StdGobDecode(t *testing.T) {
	expected := object{
		StringProp1: "foo",
		StringProp2: "bar",
		List: []embedded{
			{
				StringProp: "foo",
				IntProp:    2021,
			},
		},
	}

	input := []byte{0x3e, 0xff, 0x81, 0x3, 0x1, 0x1, 0x6, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1, 0xff, 0x82, 0x0,
		0x1, 0x3, 0x1, 0xb, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x31, 0x1, 0xc, 0x0, 0x1, 0xb,
		0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x32, 0x1, 0xc, 0x0, 0x1, 0x4, 0x4c, 0x69, 0x73,
		0x74, 0x1, 0xff, 0x86, 0x0, 0x0, 0x0, 0x22, 0xff, 0x85, 0x2, 0x1, 0x1, 0x13, 0x5b, 0x5d, 0x65, 0x6e, 0x63, 0x6f,
		0x64, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x1, 0xff, 0x86, 0x0, 0x1, 0xff,
		0x84, 0x0, 0x0, 0x31, 0xff, 0x83, 0x3, 0x1, 0x1, 0x8, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x1, 0xff,
		0x84, 0x0, 0x1, 0x2, 0x1, 0xa, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x1, 0xc, 0x0, 0x1,
		0x7, 0x49, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x1, 0x4, 0x0, 0x0, 0x0, 0x19, 0xff, 0x82, 0x1, 0x3, 0x66, 0x6f,
		0x6f, 0x1, 0x3, 0x62, 0x61, 0x72, 0x1, 0x1, 0x1, 0x3, 0x66, 0x6f, 0x6f, 0x1, 0xfe, 0xf, 0xca, 0x0, 0x0}

	var o object
	err := o.stdGobDecode(input)
	assert.NoError(t, err)
	assert.Equal(t, expected, o)
}

func Test_EncoderParity(t *testing.T) {

	// Test both stdlib & easyjson encoders produce the same output.
	o := object{
		StringProp1: "foo",
		StringProp2: "bar",
		List: []embedded{
			{
				StringProp: "foo",
				IntProp:    2021,
			},
		},
	}

	stdEnc, err := o.stdJSONEncode()
	require.NoError(t, err)
	easyEnc, err := easyjson.Marshal(o)
	require.NoError(t, err)

	assert.Equal(t, stdEnc, easyEnc)
}

func Test_DecoderParity(t *testing.T) {

	// Test both stdlib & easyjson decoders produce the same output.
	input := []byte(`{"string_prop_1":"foo","string_prop_2":"bar","list":[{"string_prop":"foo","int_prop":2021}]}`)

	var oStd object
	err := oStd.stdJSONDecode(input)
	require.NoError(t, err)

	var oEasy object
	err = easyjson.Unmarshal(input, &oEasy)
	require.NoError(t, err)

	assert.Equal(t, oStd, oEasy)
}
